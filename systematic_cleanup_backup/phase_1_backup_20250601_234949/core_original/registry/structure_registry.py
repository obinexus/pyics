#!/usr/bin/env python3
"""
pyics/core/registry/structure_registry.py
Pyics Core Data Structure Registry - Enhanced Auto-Generated

Generated: 2025-05-31T19:09:45.829589
Engineering Lead: Nnamdi Okpala / OBINexus Computing
Architecture: Enhanced Single-Pass RIFT System with Scaffolding Support

PROBLEM SOLVED: Centralized structure discovery with automated scaffolding
DEPENDENCIES: None (generated registry with static mappings)
THREAD SAFETY: Yes - immutable registry data
DETERMINISTIC: Yes - static structure mappings with scaffolding metadata

This enhanced registry provides systematic access to all data structures across
core domains, including scaffolding metadata and enhanced dependency resolution
for architectural reflection and automated code generation support.
"""

from typing import Dict, Any, Set, List, Optional
import logging
from pathlib import Path

logger = logging.getLogger("pyics.core.registry.structure_registry")

# Enhanced structure registry mapping
STRUCTURE_REGISTRY: Dict[str, Dict[str, Any]] = {
    "AtomicDataType": {
        "domain": "core",
        "file": "refactored/core/primitives/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for atomic data types with immutability guarantees

Defines contract for foundational data types that serve as
building blocks for higher-level domain structures.",
        "line_number": 30,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": ['runtime_checkable'],
    },
    "AtomicValue": {
        "domain": "core",
        "file": "refactored/core/primitives/data_types.py",
        "structure_type": "dataclass",
        "value_types": {},
        "compute_type": "static",
        "base_classes": ['ImmutableContainer'],
        "is_generic": True,
        "docstring": "Concrete atomic value container for primitive types

Provides thread-safe storage for atomic values with
immutability guarantees and deterministic operations.",
        "line_number": 112,
        "field_count": 0,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "CompositionConfig": {
        "domain": "composition",
        "file": "pyics/core/composition/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for composition domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['composition', 'composition'],
    },
    "CompositionEntity": {
        "domain": "composition",
        "file": "pyics/core/composition/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'CompositionStatus', 'priority': 'CompositionPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for composition domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['composition', 'composition'],
    },
    "CompositionPriority": {
        "domain": "composition",
        "file": "pyics/core/composition/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for composition domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['composition', 'composition'],
    },
    "CompositionProcessor": {
        "domain": "composition",
        "file": "pyics/core/composition/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for composition domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['composition', 'composition'],
    },
    "CompositionRepository": {
        "domain": "composition",
        "file": "pyics/core/composition/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for composition domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['composition', 'composition'],
    },
    "CompositionResult": {
        "domain": "composition",
        "file": "pyics/core/composition/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for composition domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['composition', 'composition'],
    },
    "CompositionStatus": {
        "domain": "composition",
        "file": "pyics/core/composition/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for composition domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['composition', 'composition'],
    },
    "CoreConfig": {
        "domain": "core",
        "file": "pyics/core/transforms/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for core domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core'],
    },
    "CoreEntity": {
        "domain": "core",
        "file": "pyics/core/transforms/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'CoreStatus', 'priority': 'CorePriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for core domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core'],
    },
    "CorePriority": {
        "domain": "core",
        "file": "pyics/core/transforms/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for core domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core'],
    },
    "CoreProcessor": {
        "domain": "core",
        "file": "pyics/core/transforms/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for core domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core'],
    },
    "CoreRepository": {
        "domain": "core",
        "file": "pyics/core/transforms/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for core domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core'],
    },
    "CoreResult": {
        "domain": "core",
        "file": "pyics/core/transforms/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for core domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core'],
    },
    "CoreStatus": {
        "domain": "core",
        "file": "pyics/core/transforms/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for core domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core', 'core'],
    },
    "LogicConfig": {
        "domain": "logic",
        "file": "pyics/core/logic/functional/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for logic domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['logic', 'logic', 'logic'],
    },
    "LogicEntity": {
        "domain": "logic",
        "file": "pyics/core/logic/functional/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'LogicStatus', 'priority': 'LogicPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for logic domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['logic', 'logic', 'logic'],
    },
    "LogicPriority": {
        "domain": "logic",
        "file": "pyics/core/logic/functional/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for logic domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['logic', 'logic', 'logic'],
    },
    "LogicProcessor": {
        "domain": "logic",
        "file": "pyics/core/logic/functional/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for logic domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['logic', 'logic', 'logic'],
    },
    "LogicRepository": {
        "domain": "logic",
        "file": "pyics/core/logic/functional/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for logic domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['logic', 'logic', 'logic'],
    },
    "LogicResult": {
        "domain": "logic",
        "file": "pyics/core/logic/functional/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for logic domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['logic', 'logic', 'logic'],
    },
    "LogicStatus": {
        "domain": "logic",
        "file": "pyics/core/logic/functional/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for logic domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['logic', 'logic', 'logic'],
    },
    "PrimitivesConfig": {
        "domain": "primitives",
        "file": "pyics/core/primitives/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for primitives domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['primitives', 'primitives', 'primitives'],
    },
    "PrimitivesEntity": {
        "domain": "primitives",
        "file": "pyics/core/primitives/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'PrimitivesStatus', 'priority': 'PrimitivesPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for primitives domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['primitives', 'primitives', 'primitives'],
    },
    "PrimitivesPriority": {
        "domain": "primitives",
        "file": "pyics/core/primitives/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for primitives domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['primitives', 'primitives', 'primitives'],
    },
    "PrimitivesProcessor": {
        "domain": "primitives",
        "file": "pyics/core/primitives/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for primitives domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['primitives', 'primitives', 'primitives'],
    },
    "PrimitivesRepository": {
        "domain": "primitives",
        "file": "pyics/core/primitives/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for primitives domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['primitives', 'primitives', 'primitives'],
    },
    "PrimitivesResult": {
        "domain": "primitives",
        "file": "pyics/core/primitives/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for primitives domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['primitives', 'primitives', 'primitives'],
    },
    "PrimitivesStatus": {
        "domain": "primitives",
        "file": "pyics/core/primitives/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for primitives domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['primitives', 'primitives', 'primitives'],
    },
    "ProtocolsConfig": {
        "domain": "protocols",
        "file": "pyics/core/protocols/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for protocols domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['protocols', 'protocols', 'protocols', 'protocols', 'protocols'],
    },
    "ProtocolsEntity": {
        "domain": "protocols",
        "file": "pyics/core/protocols/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'ProtocolsStatus', 'priority': 'ProtocolsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for protocols domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['protocols', 'protocols', 'protocols', 'protocols', 'protocols'],
    },
    "ProtocolsPriority": {
        "domain": "protocols",
        "file": "pyics/core/protocols/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for protocols domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['protocols', 'protocols', 'protocols', 'protocols', 'protocols'],
    },
    "ProtocolsProcessor": {
        "domain": "protocols",
        "file": "pyics/core/protocols/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for protocols domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['protocols', 'protocols', 'protocols', 'protocols', 'protocols'],
    },
    "ProtocolsRepository": {
        "domain": "protocols",
        "file": "pyics/core/protocols/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for protocols domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['protocols', 'protocols', 'protocols', 'protocols', 'protocols'],
    },
    "ProtocolsResult": {
        "domain": "protocols",
        "file": "pyics/core/protocols/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for protocols domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['protocols', 'protocols', 'protocols', 'protocols', 'protocols'],
    },
    "ProtocolsStatus": {
        "domain": "protocols",
        "file": "pyics/core/protocols/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for protocols domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['protocols', 'protocols', 'protocols', 'protocols', 'protocols'],
    },
    "PyicsConfig": {
        "domain": "pyics",
        "file": "pyics/core/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for pyics domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "PyicsEntity": {
        "domain": "pyics",
        "file": "pyics/core/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'PyicsStatus', 'priority': 'PyicsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for pyics domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "PyicsPriority": {
        "domain": "pyics",
        "file": "pyics/core/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for pyics domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "PyicsProcessor": {
        "domain": "pyics",
        "file": "pyics/core/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for pyics domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "PyicsRepository": {
        "domain": "pyics",
        "file": "pyics/core/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for pyics domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "PyicsResult": {
        "domain": "pyics",
        "file": "pyics/core/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for pyics domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "PyicsStatus": {
        "domain": "pyics",
        "file": "pyics/core/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for pyics domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "RefactoredConfig": {
        "domain": "refactored",
        "file": "refactored/core/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for refactored domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "RefactoredEntity": {
        "domain": "refactored",
        "file": "refactored/core/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'RefactoredStatus', 'priority': 'RefactoredPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for refactored domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "RefactoredPriority": {
        "domain": "refactored",
        "file": "refactored/core/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for refactored domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "RefactoredProcessor": {
        "domain": "refactored",
        "file": "refactored/core/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for refactored domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "RefactoredRepository": {
        "domain": "refactored",
        "file": "refactored/core/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for refactored domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "RefactoredResult": {
        "domain": "refactored",
        "file": "refactored/core/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for refactored domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "RefactoredStatus": {
        "domain": "refactored",
        "file": "refactored/core/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for refactored domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "RoutingConfig": {
        "domain": "routing",
        "file": "pyics/core/routing/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for routing domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['routing', 'routing'],
    },
    "RoutingEntity": {
        "domain": "routing",
        "file": "pyics/core/routing/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'RoutingStatus', 'priority': 'RoutingPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for routing domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['routing', 'routing'],
    },
    "RoutingPriority": {
        "domain": "routing",
        "file": "pyics/core/routing/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for routing domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['routing', 'routing'],
    },
    "RoutingProcessor": {
        "domain": "routing",
        "file": "pyics/core/routing/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for routing domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['routing', 'routing'],
    },
    "RoutingRepository": {
        "domain": "routing",
        "file": "pyics/core/routing/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for routing domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['routing', 'routing'],
    },
    "RoutingResult": {
        "domain": "routing",
        "file": "pyics/core/routing/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for routing domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['routing', 'routing'],
    },
    "RoutingStatus": {
        "domain": "routing",
        "file": "pyics/core/routing/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for routing domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['routing', 'routing'],
    },
    "SafetyConfig": {
        "domain": "safety",
        "file": "pyics/core/safety/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for safety domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['safety', 'safety'],
    },
    "SafetyEntity": {
        "domain": "safety",
        "file": "pyics/core/safety/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'SafetyStatus', 'priority': 'SafetyPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for safety domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['safety', 'safety'],
    },
    "SafetyPriority": {
        "domain": "safety",
        "file": "pyics/core/safety/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for safety domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['safety', 'safety'],
    },
    "SafetyProcessor": {
        "domain": "safety",
        "file": "pyics/core/safety/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for safety domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['safety', 'safety'],
    },
    "SafetyRepository": {
        "domain": "safety",
        "file": "pyics/core/safety/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for safety domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['safety', 'safety'],
    },
    "SafetyResult": {
        "domain": "safety",
        "file": "pyics/core/safety/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for safety domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['safety', 'safety'],
    },
    "SafetyStatus": {
        "domain": "safety",
        "file": "pyics/core/safety/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for safety domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['safety', 'safety'],
    },
    "StructuresConfig": {
        "domain": "structures",
        "file": "pyics/core/structures/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for structures domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['structures', 'structures', 'structures', 'structures', 'structures'],
    },
    "StructuresEntity": {
        "domain": "structures",
        "file": "pyics/core/structures/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'StructuresStatus', 'priority': 'StructuresPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for structures domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['structures', 'structures', 'structures', 'structures', 'structures'],
    },
    "StructuresPriority": {
        "domain": "structures",
        "file": "pyics/core/structures/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for structures domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['structures', 'structures', 'structures', 'structures', 'structures'],
    },
    "StructuresProcessor": {
        "domain": "structures",
        "file": "pyics/core/structures/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for structures domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['structures', 'structures', 'structures', 'structures', 'structures'],
    },
    "StructuresRepository": {
        "domain": "structures",
        "file": "pyics/core/structures/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for structures domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['structures', 'structures', 'structures', 'structures', 'structures'],
    },
    "StructuresResult": {
        "domain": "structures",
        "file": "pyics/core/structures/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for structures domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['structures', 'structures', 'structures', 'structures', 'structures'],
    },
    "StructuresStatus": {
        "domain": "structures",
        "file": "pyics/core/structures/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for structures domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['structures', 'structures', 'structures', 'structures', 'structures'],
    },
    "TransformationsConfig": {
        "domain": "transformations",
        "file": "pyics/core/transformations/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for transformations domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['transformations', 'transformations'],
    },
    "TransformationsEntity": {
        "domain": "transformations",
        "file": "pyics/core/transformations/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'TransformationsStatus', 'priority': 'TransformationsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for transformations domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['transformations', 'transformations'],
    },
    "TransformationsPriority": {
        "domain": "transformations",
        "file": "pyics/core/transformations/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for transformations domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transformations', 'transformations'],
    },
    "TransformationsProcessor": {
        "domain": "transformations",
        "file": "pyics/core/transformations/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transformations domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transformations', 'transformations'],
    },
    "TransformationsRepository": {
        "domain": "transformations",
        "file": "pyics/core/transformations/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transformations domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transformations', 'transformations'],
    },
    "TransformationsResult": {
        "domain": "transformations",
        "file": "pyics/core/transformations/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for transformations domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['transformations', 'transformations'],
    },
    "TransformationsStatus": {
        "domain": "transformations",
        "file": "pyics/core/transformations/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for transformations domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transformations', 'transformations'],
    },
    "TransformsConfig": {
        "domain": "transforms",
        "file": "pyics/core/transforms/formatting/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for transforms domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['transforms', 'transforms', 'transforms', 'transforms'],
    },
    "TransformsEntity": {
        "domain": "transforms",
        "file": "pyics/core/transforms/formatting/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'TransformsStatus', 'priority': 'TransformsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for transforms domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['transforms', 'transforms', 'transforms', 'transforms'],
    },
    "TransformsPriority": {
        "domain": "transforms",
        "file": "pyics/core/transforms/formatting/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for transforms domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transforms', 'transforms', 'transforms', 'transforms'],
    },
    "TransformsProcessor": {
        "domain": "transforms",
        "file": "pyics/core/transforms/formatting/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transforms domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transforms', 'transforms', 'transforms', 'transforms'],
    },
    "TransformsRepository": {
        "domain": "transforms",
        "file": "pyics/core/transforms/formatting/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transforms domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transforms', 'transforms', 'transforms', 'transforms'],
    },
    "TransformsResult": {
        "domain": "transforms",
        "file": "pyics/core/transforms/formatting/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for transforms domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['transforms', 'transforms', 'transforms', 'transforms'],
    },
    "TransformsStatus": {
        "domain": "transforms",
        "file": "pyics/core/transforms/formatting/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for transforms domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['transforms', 'transforms', 'transforms', 'transforms'],
    },
    "ValidationConfig": {
        "domain": "validation",
        "file": "pyics/core/validation/integrity/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for validation domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['validation', 'validation', 'validation'],
    },
    "ValidationEntity": {
        "domain": "validation",
        "file": "pyics/core/validation/integrity/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'ValidationStatus', 'priority': 'ValidationPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for validation domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['validation', 'validation', 'validation'],
    },
    "ValidationPriority": {
        "domain": "validation",
        "file": "pyics/core/validation/integrity/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for validation domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validation', 'validation', 'validation'],
    },
    "ValidationProcessor": {
        "domain": "validation",
        "file": "pyics/core/validation/integrity/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validation domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validation', 'validation', 'validation'],
    },
    "ValidationRepository": {
        "domain": "validation",
        "file": "pyics/core/validation/integrity/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validation domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validation', 'validation', 'validation'],
    },
    "ValidationResult": {
        "domain": "validation",
        "file": "pyics/core/validation/integrity/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for validation domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['validation', 'validation', 'validation'],
    },
    "ValidationStatus": {
        "domain": "validation",
        "file": "pyics/core/validation/integrity/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for validation domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validation', 'validation', 'validation'],
    },
    "ValidatorsConfig": {
        "domain": "validators",
        "file": "pyics/core/validators/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for validators domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['validators', 'validators'],
    },
    "ValidatorsEntity": {
        "domain": "validators",
        "file": "pyics/core/validators/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'ValidatorsStatus', 'priority': 'ValidatorsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for validators domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['validators', 'validators'],
    },
    "ValidatorsPriority": {
        "domain": "validators",
        "file": "pyics/core/validators/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for validators domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validators', 'validators'],
    },
    "ValidatorsProcessor": {
        "domain": "validators",
        "file": "pyics/core/validators/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validators domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validators', 'validators'],
    },
    "ValidatorsRepository": {
        "domain": "validators",
        "file": "pyics/core/validators/implementations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validators domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validators', 'validators'],
    },
    "ValidatorsResult": {
        "domain": "validators",
        "file": "pyics/core/validators/implementations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for validators domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
        "collision_domains": ['validators', 'validators'],
    },
    "ValidatorsStatus": {
        "domain": "validators",
        "file": "pyics/core/validators/implementations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for validators domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
        "collision_domains": ['validators', 'validators'],
    },
    "composition.CompositionConfig": {
        "domain": "composition",
        "file": "pyics/core/composition/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for composition domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "composition.CompositionEntity": {
        "domain": "composition",
        "file": "pyics/core/composition/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'CompositionStatus', 'priority': 'CompositionPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for composition domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "composition.CompositionPriority": {
        "domain": "composition",
        "file": "pyics/core/composition/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for composition domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "composition.CompositionProcessor": {
        "domain": "composition",
        "file": "pyics/core/composition/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for composition domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "composition.CompositionRepository": {
        "domain": "composition",
        "file": "pyics/core/composition/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for composition domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "composition.CompositionResult": {
        "domain": "composition",
        "file": "pyics/core/composition/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for composition domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "composition.CompositionStatus": {
        "domain": "composition",
        "file": "pyics/core/composition/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for composition domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "core.CoreConfig": {
        "domain": "core",
        "file": "pyics/core/transformations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for core domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "core.CoreEntity": {
        "domain": "core",
        "file": "pyics/core/transformations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'CoreStatus', 'priority': 'CorePriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for core domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "core.CorePriority": {
        "domain": "core",
        "file": "pyics/core/transformations/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for core domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "core.CoreProcessor": {
        "domain": "core",
        "file": "pyics/core/transformations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for core domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "core.CoreRepository": {
        "domain": "core",
        "file": "pyics/core/transformations/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for core domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "core.CoreResult": {
        "domain": "core",
        "file": "pyics/core/transformations/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for core domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "core.CoreStatus": {
        "domain": "core",
        "file": "pyics/core/transformations/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for core domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "logic.LogicConfig": {
        "domain": "logic",
        "file": "pyics/core/logic/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for logic domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "logic.LogicEntity": {
        "domain": "logic",
        "file": "pyics/core/logic/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'LogicStatus', 'priority': 'LogicPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for logic domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "logic.LogicPriority": {
        "domain": "logic",
        "file": "pyics/core/logic/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for logic domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "logic.LogicProcessor": {
        "domain": "logic",
        "file": "pyics/core/logic/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for logic domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "logic.LogicRepository": {
        "domain": "logic",
        "file": "pyics/core/logic/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for logic domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "logic.LogicResult": {
        "domain": "logic",
        "file": "pyics/core/logic/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for logic domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "logic.LogicStatus": {
        "domain": "logic",
        "file": "pyics/core/logic/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for logic domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "primitives.PrimitivesConfig": {
        "domain": "primitives",
        "file": "refactored/core/primitives/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for primitives domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "primitives.PrimitivesEntity": {
        "domain": "primitives",
        "file": "refactored/core/primitives/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'PrimitivesStatus', 'priority': 'PrimitivesPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for primitives domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "primitives.PrimitivesPriority": {
        "domain": "primitives",
        "file": "refactored/core/primitives/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for primitives domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "primitives.PrimitivesProcessor": {
        "domain": "primitives",
        "file": "refactored/core/primitives/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for primitives domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "primitives.PrimitivesRepository": {
        "domain": "primitives",
        "file": "refactored/core/primitives/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for primitives domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "primitives.PrimitivesResult": {
        "domain": "primitives",
        "file": "refactored/core/primitives/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for primitives domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "primitives.PrimitivesStatus": {
        "domain": "primitives",
        "file": "refactored/core/primitives/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for primitives domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "protocols.ProtocolsConfig": {
        "domain": "protocols",
        "file": "pyics/core/protocols/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for protocols domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "protocols.ProtocolsEntity": {
        "domain": "protocols",
        "file": "pyics/core/protocols/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'ProtocolsStatus', 'priority': 'ProtocolsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for protocols domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "protocols.ProtocolsPriority": {
        "domain": "protocols",
        "file": "pyics/core/protocols/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for protocols domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "protocols.ProtocolsProcessor": {
        "domain": "protocols",
        "file": "pyics/core/protocols/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for protocols domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "protocols.ProtocolsRepository": {
        "domain": "protocols",
        "file": "pyics/core/protocols/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for protocols domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "protocols.ProtocolsResult": {
        "domain": "protocols",
        "file": "pyics/core/protocols/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for protocols domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "protocols.ProtocolsStatus": {
        "domain": "protocols",
        "file": "pyics/core/protocols/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for protocols domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "routing.RoutingConfig": {
        "domain": "routing",
        "file": "pyics/core/routing/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for routing domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "routing.RoutingEntity": {
        "domain": "routing",
        "file": "pyics/core/routing/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'RoutingStatus', 'priority': 'RoutingPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for routing domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "routing.RoutingPriority": {
        "domain": "routing",
        "file": "pyics/core/routing/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for routing domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "routing.RoutingProcessor": {
        "domain": "routing",
        "file": "pyics/core/routing/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for routing domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "routing.RoutingRepository": {
        "domain": "routing",
        "file": "pyics/core/routing/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for routing domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "routing.RoutingResult": {
        "domain": "routing",
        "file": "pyics/core/routing/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for routing domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "routing.RoutingStatus": {
        "domain": "routing",
        "file": "pyics/core/routing/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for routing domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "safety.SafetyConfig": {
        "domain": "safety",
        "file": "pyics/core/safety/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for safety domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "safety.SafetyEntity": {
        "domain": "safety",
        "file": "pyics/core/safety/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'SafetyStatus', 'priority': 'SafetyPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for safety domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "safety.SafetyPriority": {
        "domain": "safety",
        "file": "pyics/core/safety/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for safety domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "safety.SafetyProcessor": {
        "domain": "safety",
        "file": "pyics/core/safety/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for safety domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "safety.SafetyRepository": {
        "domain": "safety",
        "file": "pyics/core/safety/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for safety domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "safety.SafetyResult": {
        "domain": "safety",
        "file": "pyics/core/safety/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for safety domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "safety.SafetyStatus": {
        "domain": "safety",
        "file": "pyics/core/safety/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for safety domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "structures.StructuresConfig": {
        "domain": "structures",
        "file": "pyics/core/structures/distribution/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for structures domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "structures.StructuresEntity": {
        "domain": "structures",
        "file": "pyics/core/structures/distribution/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'StructuresStatus', 'priority': 'StructuresPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for structures domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "structures.StructuresPriority": {
        "domain": "structures",
        "file": "pyics/core/structures/distribution/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for structures domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "structures.StructuresProcessor": {
        "domain": "structures",
        "file": "pyics/core/structures/distribution/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for structures domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "structures.StructuresRepository": {
        "domain": "structures",
        "file": "pyics/core/structures/distribution/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for structures domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "structures.StructuresResult": {
        "domain": "structures",
        "file": "pyics/core/structures/distribution/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for structures domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "structures.StructuresStatus": {
        "domain": "structures",
        "file": "pyics/core/structures/distribution/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for structures domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transformations.TransformationsConfig": {
        "domain": "transformations",
        "file": "pyics/core/transformations/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for transformations domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "transformations.TransformationsEntity": {
        "domain": "transformations",
        "file": "pyics/core/transformations/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'TransformationsStatus', 'priority': 'TransformationsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for transformations domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "transformations.TransformationsPriority": {
        "domain": "transformations",
        "file": "pyics/core/transformations/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for transformations domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transformations.TransformationsProcessor": {
        "domain": "transformations",
        "file": "pyics/core/transformations/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transformations domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transformations.TransformationsRepository": {
        "domain": "transformations",
        "file": "pyics/core/transformations/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transformations domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transformations.TransformationsResult": {
        "domain": "transformations",
        "file": "pyics/core/transformations/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for transformations domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "transformations.TransformationsStatus": {
        "domain": "transformations",
        "file": "pyics/core/transformations/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for transformations domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transforms.TransformsConfig": {
        "domain": "transforms",
        "file": "pyics/core/transforms/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for transforms domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "transforms.TransformsEntity": {
        "domain": "transforms",
        "file": "pyics/core/transforms/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'TransformsStatus', 'priority': 'TransformsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for transforms domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "transforms.TransformsPriority": {
        "domain": "transforms",
        "file": "pyics/core/transforms/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for transforms domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transforms.TransformsProcessor": {
        "domain": "transforms",
        "file": "pyics/core/transforms/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transforms domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transforms.TransformsRepository": {
        "domain": "transforms",
        "file": "pyics/core/transforms/__pycache__/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for transforms domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "transforms.TransformsResult": {
        "domain": "transforms",
        "file": "pyics/core/transforms/__pycache__/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for transforms domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "transforms.TransformsStatus": {
        "domain": "transforms",
        "file": "pyics/core/transforms/__pycache__/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for transforms domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validation.ValidationConfig": {
        "domain": "validation",
        "file": "pyics/core/validation/performance/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for validation domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "validation.ValidationEntity": {
        "domain": "validation",
        "file": "pyics/core/validation/performance/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'ValidationStatus', 'priority': 'ValidationPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for validation domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "validation.ValidationPriority": {
        "domain": "validation",
        "file": "pyics/core/validation/performance/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for validation domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validation.ValidationProcessor": {
        "domain": "validation",
        "file": "pyics/core/validation/performance/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validation domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validation.ValidationRepository": {
        "domain": "validation",
        "file": "pyics/core/validation/performance/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validation domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validation.ValidationResult": {
        "domain": "validation",
        "file": "pyics/core/validation/performance/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for validation domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "validation.ValidationStatus": {
        "domain": "validation",
        "file": "pyics/core/validation/performance/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for validation domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validators.ValidatorsConfig": {
        "domain": "validators",
        "file": "pyics/core/validators/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'enabled': 'bool', 'max_items': 'int', 'timeout_seconds': 'int', 'options': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Configuration data structure for validators domain

Static configuration with validation support",
        "line_number": 57,
        "field_count": 4,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "validators.ValidatorsEntity": {
        "domain": "validators",
        "file": "pyics/core/validators/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'id': 'str', 'name': 'str', 'status': 'ValidatorsStatus', 'priority': 'ValidatorsPriority', 'created_at': 'datetime', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Base entity for validators domain

Immutable data container following DOP principles",
        "line_number": 43,
        "field_count": 6,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "validators.ValidatorsPriority": {
        "domain": "validators",
        "file": "pyics/core/validators/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'LOW': 'enum_value', 'MEDIUM': 'enum_value', 'HIGH': 'enum_value', 'CRITICAL': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Priority levels for validators domain elements",
        "line_number": 34,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validators.ValidatorsProcessor": {
        "domain": "validators",
        "file": "pyics/core/validators/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validators domain processors",
        "line_number": 82,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validators.ValidatorsRepository": {
        "domain": "validators",
        "file": "pyics/core/validators/interfaces/data_types.py",
        "structure_type": "protocol",
        "value_types": {},
        "compute_type": "interface",
        "base_classes": ['Protocol'],
        "is_generic": False,
        "docstring": "Protocol for validators domain data repositories",
        "line_number": 93,
        "field_count": 0,
        "is_frozen": False,
        "decorator_info": [],
    },
    "validators.ValidatorsResult": {
        "domain": "validators",
        "file": "pyics/core/validators/interfaces/data_types.py",
        "structure_type": "dataclass",
        "value_types": {'success': 'bool', 'data': 'Any', 'error_message': 'Optional[...]', 'execution_time': 'Optional[...]', 'metadata': 'Dict[...]'},
        "compute_type": "static",
        "base_classes": [],
        "is_generic": False,
        "docstring": "Result container for validators domain operations

Immutable result with success/error handling",
        "line_number": 69,
        "field_count": 5,
        "is_frozen": True,
        "decorator_info": ['dataclass(...)'],
    },
    "validators.ValidatorsStatus": {
        "domain": "validators",
        "file": "pyics/core/validators/interfaces/data_types.py",
        "structure_type": "enum",
        "value_types": {'INITIALIZED': 'enum_value', 'PROCESSING': 'enum_value', 'COMPLETED': 'enum_value', 'ERROR': 'enum_value'},
        "compute_type": "static",
        "base_classes": ['Enum'],
        "is_generic": False,
        "docstring": "Status enumeration for validators domain operations",
        "line_number": 27,
        "field_count": 4,
        "is_frozen": False,
        "decorator_info": [],
    },
}

# Enhanced domain mapping with scaffolding info
DOMAIN_STRUCTURE_MAP: Dict[str, List[str]] = {
    "composition": ['CompositionStatus', 'CompositionPriority', 'CompositionEntity', 'CompositionConfig', 'CompositionResult', 'CompositionProcessor', 'CompositionRepository', 'composition.CompositionStatus', 'composition.CompositionPriority', 'composition.CompositionEntity', 'composition.CompositionConfig', 'composition.CompositionResult', 'composition.CompositionProcessor', 'composition.CompositionRepository'],
    "core": ['CoreStatus', 'CorePriority', 'CoreEntity', 'CoreConfig', 'CoreResult', 'CoreProcessor', 'CoreRepository', 'core.CoreStatus', 'core.CorePriority', 'core.CoreEntity', 'core.CoreConfig', 'core.CoreResult', 'core.CoreProcessor', 'core.CoreRepository', 'AtomicDataType', 'AtomicValue'],
    "logic": ['LogicStatus', 'LogicPriority', 'LogicEntity', 'LogicConfig', 'LogicResult', 'LogicProcessor', 'LogicRepository', 'logic.LogicStatus', 'logic.LogicPriority', 'logic.LogicEntity', 'logic.LogicConfig', 'logic.LogicResult', 'logic.LogicProcessor', 'logic.LogicRepository'],
    "primitives": ['PrimitivesStatus', 'PrimitivesPriority', 'PrimitivesEntity', 'PrimitivesConfig', 'PrimitivesResult', 'PrimitivesProcessor', 'PrimitivesRepository', 'primitives.PrimitivesStatus', 'primitives.PrimitivesPriority', 'primitives.PrimitivesEntity', 'primitives.PrimitivesConfig', 'primitives.PrimitivesResult', 'primitives.PrimitivesProcessor', 'primitives.PrimitivesRepository'],
    "protocols": ['ProtocolsStatus', 'ProtocolsPriority', 'ProtocolsEntity', 'ProtocolsConfig', 'ProtocolsResult', 'ProtocolsProcessor', 'ProtocolsRepository', 'protocols.ProtocolsStatus', 'protocols.ProtocolsPriority', 'protocols.ProtocolsEntity', 'protocols.ProtocolsConfig', 'protocols.ProtocolsResult', 'protocols.ProtocolsProcessor', 'protocols.ProtocolsRepository'],
    "pyics": ['PyicsStatus', 'PyicsPriority', 'PyicsEntity', 'PyicsConfig', 'PyicsResult', 'PyicsProcessor', 'PyicsRepository'],
    "refactored": ['RefactoredStatus', 'RefactoredPriority', 'RefactoredEntity', 'RefactoredConfig', 'RefactoredResult', 'RefactoredProcessor', 'RefactoredRepository'],
    "routing": ['RoutingStatus', 'RoutingPriority', 'RoutingEntity', 'RoutingConfig', 'RoutingResult', 'RoutingProcessor', 'RoutingRepository', 'routing.RoutingStatus', 'routing.RoutingPriority', 'routing.RoutingEntity', 'routing.RoutingConfig', 'routing.RoutingResult', 'routing.RoutingProcessor', 'routing.RoutingRepository'],
    "safety": ['SafetyStatus', 'SafetyPriority', 'SafetyEntity', 'SafetyConfig', 'SafetyResult', 'SafetyProcessor', 'SafetyRepository', 'safety.SafetyStatus', 'safety.SafetyPriority', 'safety.SafetyEntity', 'safety.SafetyConfig', 'safety.SafetyResult', 'safety.SafetyProcessor', 'safety.SafetyRepository'],
    "structures": ['StructuresStatus', 'StructuresPriority', 'StructuresEntity', 'StructuresConfig', 'StructuresResult', 'StructuresProcessor', 'StructuresRepository', 'structures.StructuresStatus', 'structures.StructuresPriority', 'structures.StructuresEntity', 'structures.StructuresConfig', 'structures.StructuresResult', 'structures.StructuresProcessor', 'structures.StructuresRepository'],
    "transformations": ['TransformationsStatus', 'TransformationsPriority', 'TransformationsEntity', 'TransformationsConfig', 'TransformationsResult', 'TransformationsProcessor', 'TransformationsRepository', 'transformations.TransformationsStatus', 'transformations.TransformationsPriority', 'transformations.TransformationsEntity', 'transformations.TransformationsConfig', 'transformations.TransformationsResult', 'transformations.TransformationsProcessor', 'transformations.TransformationsRepository'],
    "transforms": ['TransformsStatus', 'TransformsPriority', 'TransformsEntity', 'TransformsConfig', 'TransformsResult', 'TransformsProcessor', 'TransformsRepository', 'transforms.TransformsStatus', 'transforms.TransformsPriority', 'transforms.TransformsEntity', 'transforms.TransformsConfig', 'transforms.TransformsResult', 'transforms.TransformsProcessor', 'transforms.TransformsRepository'],
    "validation": ['ValidationStatus', 'ValidationPriority', 'ValidationEntity', 'ValidationConfig', 'ValidationResult', 'ValidationProcessor', 'ValidationRepository', 'validation.ValidationStatus', 'validation.ValidationPriority', 'validation.ValidationEntity', 'validation.ValidationConfig', 'validation.ValidationResult', 'validation.ValidationProcessor', 'validation.ValidationRepository'],
    "validators": ['ValidatorsStatus', 'ValidatorsPriority', 'ValidatorsEntity', 'ValidatorsConfig', 'ValidatorsResult', 'ValidatorsProcessor', 'ValidatorsRepository', 'validators.ValidatorsStatus', 'validators.ValidatorsPriority', 'validators.ValidatorsEntity', 'validators.ValidatorsConfig', 'validators.ValidatorsResult', 'validators.ValidatorsProcessor', 'validators.ValidatorsRepository'],
}

# Scaffolding metadata
SCAFFOLDING_METADATA = {
    "scaffolded_domains": ['composition', 'core', 'logic', 'logic/composition', 'logic/functional', 'logic/mathematical', 'primitives', 'protocols', 'protocols/compliance', 'protocols/contracts', 'protocols/interfaces', 'pyics', 'refactored', 'registry/global', 'registry/migration', 'registry/versioned', 'routing', 'safety', 'structures', 'structures/audit', 'structures/calendars', 'structures/distribution', 'structures/events', 'transformations', 'transforms', 'transforms/aggregation', 'transforms/formatting', 'transforms/pipeline', 'transforms/validation', 'validation', 'validation/integrity', 'validation/performance', 'validation/purity', 'validators'],
    "scaffolded_modules": ['/home/obinexus/projects/pkg/pyics/pyics/core/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/interfaces/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/interfaces/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/interfaces/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/tests/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/tests/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/composition/tests/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/composition/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/composition/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/composition/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/composition/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/composition/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/composition/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/functional/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/functional/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/functional/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/functional/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/functional/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/functional/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/mathematical/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/mathematical/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/mathematical/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/mathematical/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/mathematical/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/mathematical/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/logic/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/interfaces/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/interfaces/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/interfaces/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/tests/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/tests/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/primitives/tests/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/compliance/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/compliance/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/compliance/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/compliance/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/compliance/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/compliance/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/contracts/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/contracts/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/contracts/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/contracts/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/contracts/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/contracts/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/interfaces/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/interfaces/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/interfaces/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/interfaces/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/interfaces/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/interfaces/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/tests/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/tests/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/protocols/tests/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/global/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/global/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/global/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/migration/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/migration/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/migration/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/versioned/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/versioned/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/registry/versioned/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/interfaces/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/interfaces/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/interfaces/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/tests/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/tests/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/routing/tests/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/interfaces/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/interfaces/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/interfaces/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/tests/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/tests/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/safety/tests/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/audit/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/audit/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/audit/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/audit/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/audit/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/audit/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/calendars/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/calendars/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/calendars/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/calendars/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/calendars/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/calendars/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/distribution/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/distribution/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/distribution/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/distribution/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/distribution/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/distribution/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/events/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/events/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/events/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/events/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/events/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/events/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/structures/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/interfaces/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/interfaces/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/interfaces/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/tests/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/tests/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transformations/tests/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/aggregation/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/aggregation/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/aggregation/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/aggregation/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/aggregation/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/aggregation/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/formatting/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/formatting/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/formatting/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/formatting/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/formatting/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/formatting/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/pipeline/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/pipeline/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/pipeline/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/pipeline/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/pipeline/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/pipeline/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/validation/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/validation/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/validation/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/validation/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/validation/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/transforms/validation/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/integrity/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/integrity/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/integrity/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/integrity/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/integrity/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/integrity/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/performance/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/performance/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/performance/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/performance/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/performance/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/performance/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/purity/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/purity/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/purity/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/purity/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/purity/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/purity/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validation/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/implementations/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/implementations/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/implementations/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/interfaces/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/interfaces/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/interfaces/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/relations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/tests/data_types.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/tests/operations.py', '/home/obinexus/projects/pkg/pyics/pyics/core/validators/tests/relations.py', '/home/obinexus/projects/pkg/pyics/refactored/core/data_types.py', '/home/obinexus/projects/pkg/pyics/refactored/core/operations.py', '/home/obinexus/projects/pkg/pyics/refactored/core/primitives/__pycache__/data_types.py', '/home/obinexus/projects/pkg/pyics/refactored/core/primitives/__pycache__/operations.py', '/home/obinexus/projects/pkg/pyics/refactored/core/primitives/__pycache__/relations.py', '/home/obinexus/projects/pkg/pyics/refactored/core/primitives/relations.py', '/home/obinexus/projects/pkg/pyics/refactored/core/relations.py'],
    "total_scaffolded": 238,
    "scaffolding_templates": ['data_types.py', 'relations.py', 'operations.py']
}

# Enhanced registry metadata
REGISTRY_METADATA = {
    "generated": "2025-05-31T19:09:45.829589",
    "total_structures": 184,
    "domains_discovered": ['composition', 'core', 'logic', 'logic/composition', 'logic/functional', 'logic/mathematical', 'primitives', 'protocols', 'protocols/compliance', 'protocols/contracts', 'protocols/interfaces', 'pyics', 'refactored', 'registry/global', 'registry/migration', 'registry/versioned', 'routing', 'safety', 'structures', 'structures/audit', 'structures/calendars', 'structures/distribution', 'structures/events', 'transformations', 'transforms', 'transforms/aggregation', 'transforms/formatting', 'transforms/pipeline', 'transforms/validation', 'validation', 'validation/integrity', 'validation/performance', 'validation/purity', 'validators'],
    "domains_scaffolded": ['composition', 'core', 'logic', 'logic/composition', 'logic/functional', 'logic/mathematical', 'primitives', 'protocols', 'protocols/compliance', 'protocols/contracts', 'protocols/interfaces', 'pyics', 'refactored', 'registry/global', 'registry/migration', 'registry/versioned', 'routing', 'safety', 'structures', 'structures/audit', 'structures/calendars', 'structures/distribution', 'structures/events', 'transformations', 'transforms', 'transforms/aggregation', 'transforms/formatting', 'transforms/pipeline', 'transforms/validation', 'validation', 'validation/integrity', 'validation/performance', 'validation/purity', 'validators'],
    "structure_types": {'enum': 52, 'dataclass': 79, 'protocol': 53},
    "compute_type_distribution": {'static': 131, 'interface': 53},
    "generation_log": "structure_integration_20250531_190945.log",
    "path_resolver_used": True,
    "scaffolding_enabled": True
}

def validate_enhanced_structure_registry() -> bool:
    """
    Enhanced validation for structure registry with scaffolding checks
    
    Returns:
        True if registry is valid, False if issues detected
    """
    validation_errors = []
    validation_warnings = []
    
    for structure_name, structure_info in STRUCTURE_REGISTRY.items():
        # Validate required fields
        required_fields = ["domain", "file", "structure_type", "compute_type"]
        for field in required_fields:
            if field not in structure_info:
                validation_errors.append(f"Missing {field} in {structure_name}")
        
        # Enhanced validation checks
        value_types = structure_info.get("value_types", {})
        structure_type = structure_info.get("structure_type")
        
        if not value_types and structure_type == "dataclass":
            validation_warnings.append(f"Empty dataclass detected: {structure_name}")
        
        # Check scaffolding consistency
        domain = structure_info.get("domain")
        if domain in SCAFFOLDING_METADATA["scaffolded_domains"]:
            logger.info(f"Structure {structure_name} is in scaffolded domain: {domain}")
    
    # Report validation results
    if validation_errors:
        logger.error(f"Registry validation failed with {len(validation_errors)} errors")
        for error in validation_errors:
            logger.error(f"  ERROR: {error}")
        return False
    
    if validation_warnings:
        logger.warning(f"Registry validation completed with {len(validation_warnings)} warnings")
        for warning in validation_warnings:
            logger.warning(f"  WARNING: {warning}")
    
    logger.info(f"Enhanced registry validation passed: {len(STRUCTURE_REGISTRY)} structures")
    return True

def get_structure_info(structure_name: str) -> Dict[str, Any]:
    """Get enhanced structure information by name"""
    return STRUCTURE_REGISTRY.get(structure_name, {})

def get_structures_by_domain(domain: str) -> List[str]:
    """Get all structures for a domain"""
    return DOMAIN_STRUCTURE_MAP.get(domain, [])

def get_structures_by_type(structure_type: str) -> List[str]:
    """Get structures by type"""
    return [
        name for name, info in STRUCTURE_REGISTRY.items()
        if info.get("structure_type") == structure_type
    ]

def get_structures_by_compute_type(compute_type: str) -> List[str]:
    """Get structures by compute type"""
    return [
        name for name, info in STRUCTURE_REGISTRY.items()
        if info.get("compute_type") == compute_type
    ]

def get_scaffolded_domains() -> List[str]:
    """Get list of domains that were scaffolded"""
    return SCAFFOLDING_METADATA["scaffolded_domains"]

def is_structure_scaffolded(structure_name: str) -> bool:
    """Check if a structure is from a scaffolded domain"""
    structure_info = get_structure_info(structure_name)
    domain = structure_info.get("domain")
    return domain in SCAFFOLDING_METADATA["scaffolded_domains"]

def get_domain_statistics(domain: str) -> Dict[str, Any]:
    """Get comprehensive statistics for a domain"""
    structures = get_structures_by_domain(domain)
    
    if not structures:
        return {"error": "Domain not found"}
    
    structure_types = {}
    compute_types = {}
    total_fields = 0
    
    for structure_name in structures:
        info = get_structure_info(structure_name)
        
        # Count structure types
        struct_type = info.get("structure_type", "unknown")
        structure_types[struct_type] = structure_types.get(struct_type, 0) + 1
        
        # Count compute types
        compute_type = info.get("compute_type", "unknown")
        compute_types[compute_type] = compute_types.get(compute_type, 0) + 1
        
        # Count fields
        field_count = info.get("field_count", 0)
        total_fields += field_count
    
    return {
        "domain": domain,
        "total_structures": len(structures),
        "structure_types": structure_types,
        "compute_types": compute_types,
        "total_fields": total_fields,
        "average_fields_per_structure": total_fields / len(structures) if structures else 0,
        "is_scaffolded": domain in SCAFFOLDING_METADATA["scaffolded_domains"]
    }

# Export enhanced interface
__all__ = [
    'STRUCTURE_REGISTRY',
    'DOMAIN_STRUCTURE_MAP',
    'SCAFFOLDING_METADATA',
    'REGISTRY_METADATA',
    'validate_enhanced_structure_registry',
    'get_structure_info',
    'get_structures_by_domain',
    'get_structures_by_type',
    'get_structures_by_compute_type',
    'get_scaffolded_domains',
    'is_structure_scaffolded',
    'get_domain_statistics',
]

# Auto-validate enhanced registry on module load
if not validate_enhanced_structure_registry():
    logger.warning("Enhanced structure registry loaded with validation warnings")
else:
    logger.info(f"Enhanced structure registry loaded successfully: {REGISTRY_METADATA['total_structures']} structures")
    logger.info(f"Scaffolding metadata: {len(SCAFFOLDING_METADATA['scaffolded_domains'])} domains scaffolded")

# [EOF] - End of enhanced structure_registry.py module
