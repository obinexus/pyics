"""
Pyics Single-Pass IoC Registry
Generated by systematic cleanup execution

Engineering Lead: Nnamdi Okpala / OBINexus Computing
Architecture: Single-pass loading with cost-aware dependency resolution
"""

import json
from typing import Dict, List, Any, Optional
from pathlib import Path

SINGLE_PASS_LOAD_ORDER = {
    "primitives": 10,
    "protocols": 20,
    "structures": 30,
    "composition": 40,
    "validators": 50,
    "transformations": 60,
    "registry": 70,
    "routing": 80,
    "safety": 90
}

class SinglePassRegistry:
    """Single-pass domain registry with cost-aware loading"""
    
    def __init__(self):
        self.loaded_domains = {}
        self.load_performance = {}
        
    def get_load_order(self) -> Dict[str, int]:
        """Get single-pass load order configuration"""
        return SINGLE_PASS_LOAD_ORDER.copy()
    
    def get_load_performance(self) -> Dict[str, Any]:
        """Get load performance metrics"""
        return self.load_performance.copy()
    
    def register_domain(self, domain_name: str, domain_module: Any) -> None:
        """Register domain in single-pass order"""
        if domain_name in SINGLE_PASS_LOAD_ORDER:
            self.loaded_domains[domain_name] = domain_module
        else:
            raise ValueError(f"Domain {domain_name} not in single-pass architecture")
    
    def validate_dependencies(self, domain_name: str) -> bool:
        """Validate domain dependencies are loaded"""
        dependencies = self._get_domain_dependencies(domain_name)
        return all(dep in self.loaded_domains for dep in dependencies)
    
    def _get_domain_dependencies(self, domain_name: str) -> List[str]:
        """Get domain dependencies based on load order"""
        current_order = SINGLE_PASS_LOAD_ORDER.get(domain_name, 0)
        return [
            domain for domain, order in SINGLE_PASS_LOAD_ORDER.items()
            if order < current_order
        ]

# Global registry instance
_registry = SinglePassRegistry()

def get_registry() -> SinglePassRegistry:
    """Get global registry instance"""
    return _registry

def validate_architecture() -> bool:
    """Validate single-pass architecture compliance"""
    try:
        registry = get_registry()
        load_order = registry.get_load_order()
        return len(load_order) > 0
    except Exception:
        return False
